# -*- coding: utf-8 -*-
"""label_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ASPDBvRcDFB4If_mbzVnvgG0rX1hLDok
"""
import streamlit as st
import pandas as pd

import streamlit as st
import pandas as pd

st.set_page_config(page_title="야구 댓글 라벨링 도구", layout="centered")
st.title("⚾ 야구 댓글 감정 라벨링 도구")

st.markdown("""
이 도구는 CSV 파일을 업로드한 후, 각 댓글을 긍정(👍) 또는 부정(👎)으로 분류하고  
그 결과를 저장할 수 있는 간단한 라벨링 웹 인터페이스입니다.  
- 라벨은 `1`: 긍정, `0`: 부정 으로 저장됩니다  
- 업로드하는 CSV에는 `comment` 열이 포함되어 있어야 합니다  
- **라벨링이 애매한 댓글은 ⏭️ 스킵 버튼으로 넘겨도 괜찮습니다. 저장 시 라벨이 지정된 댓글만 다운로드됩니다.**  
- **이전 댓글로 돌아가고 싶을 땐 ⬅️ 뒤로가기 버튼을 누르세요.**
""")

mode = st.radio("라벨링 모드 선택", ["새로 시작", "이전 파일 이어하기"])
uploaded_file = st.file_uploader("CSV 파일 업로드", type="csv")

if uploaded_file:
    try:
        df = pd.read_csv(uploaded_file, encoding='utf-8-sig')
    except (UnicodeDecodeError, pd.errors.EmptyDataError):
        try:
            df = pd.read_csv(uploaded_file, encoding='cp949')
        except pd.errors.EmptyDataError:
            st.error("❌ CSV 파일이 비어있거나 인코딩 문제로 읽을 수 없습니다.")
            st.stop()

    if 'label' not in df.columns:
        df['label'] = None

    if 'df' not in st.session_state:
        st.session_state.df = df
        unlabeled_indices = df[df['label'].isna()].index
        st.session_state.current_idx = unlabeled_indices[0] if not unlabeled_indices.empty else 0
    else:
        df = st.session_state.df

    idx = st.session_state.current_idx
    total_rows = len(df)

    st.markdown(f"**{idx+1} / {total_rows} 번째 댓글**")

    text = df.iloc[idx]['comment'] if pd.notna(df.iloc[idx]['comment']) else "(내용 없음)"
    st.text_area("📝 댓글 내용", text, height=100)

    col1, col2, col3, col4 = st.columns(4)
    if col1.button("👍 긍정", key=f"pos_{idx}"):
        df.at[idx, 'label'] = 1
        st.session_state.current_idx = min(idx + 1, total_rows - 1)

    if col2.button("👎 부정", key=f"neg_{idx}"):
        df.at[idx, 'label'] = 0
        st.session_state.current_idx = min(idx + 1, total_rows - 1)

    if col3.button("⏭️ 스킵", key=f"skip_{idx}"):
        st.session_state.current_idx = min(idx + 1, total_rows - 1)

    if col4.button("⬅️ 뒤로가기", key=f"back_{idx}"):
        st.session_state.current_idx = max(idx - 1, 0)

    st.progress(df['label'].notna().mean())

    if st.checkbox("✅ 라벨링된 댓글만 보기"):
        preview_df = df[df['label'].notna()][['comment', 'label']].copy()
        preview_df['label'] = preview_df['label'].map({1: "긍정", 0: "부정"})
        st.dataframe(preview_df)

    file_name = st.text_input("다운로드할 파일 이름", value="labeled_output.csv")
    labeled_df = df[df['label'].notna()]
    csv = labeled_df.to_csv(index=False, encoding='utf-8-sig')

    st.download_button(
        label="📥 라벨링된 CSV 다운로드",
        data=csv,
        file_name=file_name,
        mime='text/csv'
    )
