# -*- coding: utf-8 -*-
"""label_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ASPDBvRcDFB4If_mbzVnvgG0rX1hLDok
"""
import streamlit as st
import pandas as pd

st.set_page_config(page_title="야구 댓글 라벨링 도구", layout="centered")
st.title("⚾ 야구 댓글 감정 라벨링 도구")

st.markdown("""
이 도구는 CSV 파일을 업로드한 후, 각 댓글을 긍정(👍) 또는 부정(👎)으로 분류하고  
그 결과를 저장할 수 있는 간단한 라벨링 웹 인터페이스입니다.  
- 라벨은 `1`: 긍정, `0`: 부정 으로 저장됩니다  
- 업로드하는 CSV에는 `comment` 열이 포함되어 있어야 합니다  
- **라벨링이 애매한 댓글은 ⏭️ 스킵 버튼으로 넘겨도 괜찮습니다. 저장 시 라벨이 지정된 댓글만 다운로드됩니다.**
""")

mode = st.radio("라벨링 모드 선택", ["새로 시작", "이전 파일 이어하기"])
uploaded_file = st.file_uploader("CSV 파일 업로드", type="csv")

if uploaded_file:
    if 'df' not in st.session_state:
        df = pd.read_csv(uploaded_file)
        if 'label' not in df.columns:
            df['label'] = None
        st.session_state.df = df
        st.session_state.current_idx = 0
    else:
        df = st.session_state.df

    unlabeled = df[df['label'].isna()]
    remaining_indices = unlabeled.index.tolist()

    if st.checkbox("✅ 라벨링된 댓글만 보기"):
        preview_df = df[df['label'].notna()][['comment', 'label']].copy()
        preview_df['label'] = preview_df['label'].map({1: "긍정", 0: "부정"})
        st.dataframe(preview_df)
    else:
        if remaining_indices:
            idx = st.session_state.current_idx
            if idx not in remaining_indices:
                idx = remaining_indices[0]
                st.session_state.current_idx = idx

            st.markdown(f"**{idx+1} / {len(df)} 번째 댓글**")
            text = df.iloc[idx]['comment'] if pd.notna(df.iloc[idx]['comment']) else "(내용 없음)"
            st.text_area("📝 댓글 내용", text, height=100)

            col1, col2, col3 = st.columns(3)
            if col1.button("👍 긍정", key=f"pos_{idx}"):
                df.at[idx, 'label'] = 1
                next_idx = next((i for i in remaining_indices if i > idx), None)
                st.session_state.current_idx = next_idx if next_idx is not None else idx
            if col2.button("👎 부정", key=f"neg_{idx}"):
                df.at[idx, 'label'] = 0
                next_idx = next((i for i in remaining_indices if i > idx), None)
                st.session_state.current_idx = next_idx if next_idx is not None else idx
            if col3.button("⏭️ 스킵", key=f"skip_{idx}"):
                next_idx = next((i for i in remaining_indices if i > idx), None)
                st.session_state.current_idx = next_idx if next_idx is not None else idx
        else:
            st.success("🎉 모든 댓글 라벨링 완료!")

    st.progress(df['label'].notna().mean())

    file_name = st.text_input("다운로드할 파일 이름", value="labeled_output.csv")
    labeled_df = df[df['label'].notna()]
    csv = labeled_df.to_csv(index=False, encoding='utf-8-sig')

    st.download_button(
        label="📥 라벨링된 CSV 다운로드",
        data=csv,
        file_name=file_name,
        mime='text/csv'
    )
